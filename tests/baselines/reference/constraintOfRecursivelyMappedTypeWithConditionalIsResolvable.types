=== tests/cases/compiler/constraintOfRecursivelyMappedTypeWithConditionalIsResolvable.ts ===
// https://github.com/Microsoft/TypeScript/issues/25379

interface Map<K, V> {
>Map : Map<K, V>
>K : K
>V : V

    // ...
}

export type ImmutableTypes = IImmutableMap<any>;
>ImmutableTypes : IImmutableMap<any>
>IImmutableMap : IImmutableMap<T>

export type ImmutableModel<T> = { [K in keyof T]: T[K] extends ImmutableTypes ? T[K] : never };
>ImmutableModel : ImmutableModel<T>
>T : T
>K : K
>T : T
>T : T
>K : K
>ImmutableTypes : IImmutableMap<any>
>T : T
>K : K

export interface IImmutableMap<T extends ImmutableModel<T>> extends Map<string, any> {
>IImmutableMap : IImmutableMap<T>
>T : T
>ImmutableModel : ImmutableModel<T>
>T : T
>Map : Map<K, V>

    set<K extends keyof T>(key: K, value: T[K]): IImmutableMap<T>;
>set : <K extends keyof T>(key: K, value: T[K]) => IImmutableMap<T>
>K : K
>T : T
>key : K
>K : K
>value : T[K]
>T : T
>K : K
>IImmutableMap : IImmutableMap<T>
>T : T
}

export type ImmutableTypes2 = IImmutableMap2<any>;
>ImmutableTypes2 : IImmutableMap2<any>
>IImmutableMap2 : IImmutableMap2<T>

type isImmutableType<T> = [T] extends [ImmutableTypes2] ? T : never;
>isImmutableType : isImmutableType<T>
>T : T
>T : T
>ImmutableTypes2 : IImmutableMap2<any>
>T : T

export type ImmutableModel2<T> = { [K in keyof T]: isImmutableType<T[K]> };
>ImmutableModel2 : ImmutableModel2<T>
>T : T
>K : K
>T : T
>isImmutableType : isImmutableType<T>
>T : T
>K : K

export interface IImmutableMap2<T extends ImmutableModel2<T>> extends Map<string, any> {
>IImmutableMap2 : IImmutableMap2<T>
>T : T
>ImmutableModel2 : ImmutableModel2<T>
>T : T
>Map : Map<K, V>

    set<K extends keyof T>(key: K, value: T[K]): IImmutableMap2<T>;
>set : <K extends keyof T>(key: K, value: T[K]) => IImmutableMap2<T>
>K : K
>T : T
>key : K
>K : K
>value : T[K]
>T : T
>K : K
>IImmutableMap2 : IImmutableMap2<T>
>T : T
}

